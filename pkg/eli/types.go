// Package eli provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package eli

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ActTextType.
const (
	H ActTextType = "H"
	I ActTextType = "I"
	O ActTextType = "O"
	T ActTextType = "T"
	U ActTextType = "U"
)

// Defines values for SearchDate.
const (
	AFTER   SearchDate = "AFTER"
	BEFORE  SearchDate = "BEFORE"
	BETWEEN SearchDate = "BETWEEN"
	NONE    SearchDate = "NONE"
	ONDAY   SearchDate = "ON_DAY"
)

// Defines values for SortColumn.
const (
	Change    SortColumn = "change"
	Position  SortColumn = "position"
	Publisher SortColumn = "publisher"
	Title     SortColumn = "title"
)

// Defines values for SortDir.
const (
	Asc  SortDir = "asc"
	Desc SortDir = "desc"
)

// Defines values for StatusInForce.
const (
	INFORCE    StatusInForce = "IN_FORCE"
	NOTINFORCE StatusInForce = "NOT_IN_FORCE"
	UNKNOWN    StatusInForce = "UNKNOWN"
)

// Act Information about an act.
type Act struct {
	// ELI an European Legislation Identifier
	ELI *string `json:"ELI,omitempty"`

	// Address an address of publication. An address is in format {publisher}{year}{volume}{position}.
	Address *string `json:"address,omitempty"`

	// AnnouncementDate announcement date
	AnnouncementDate *openapi_types.Date `json:"announcementDate,omitempty"`

	// AuthorizedBody authorized body
	AuthorizedBody *[]string `json:"authorizedBody,omitempty"`

	// ChangeDate date and time of last change in a document
	ChangeDate *CustomTime `json:"changeDate,omitempty"`

	// Comments comments
	Comments *string `json:"comments,omitempty"`

	// Directives a list of european directives
	Directives *[]Directive `json:"directives,omitempty"`

	// DisplayAddress a display address
	DisplayAddress *string `json:"displayAddress,omitempty"`

	// EntryIntoForce date of entry into force
	EntryIntoForce *openapi_types.Date `json:"entryIntoForce,omitempty"`

	// ExpirationDate date of expiration of the act
	ExpirationDate *openapi_types.Date `json:"expirationDate,omitempty"`

	// InForce is the act in force
	InForce *StatusInForce `json:"inForce,omitempty"`

	// Keywords a list of keywords associated with this act
	Keywords *[]string `json:"keywords,omitempty"`

	// KeywordsNames a list of names associated with this act
	KeywordsNames *[]string `json:"keywordsNames,omitempty"`

	// LegalStatusDate date of legal status
	LegalStatusDate *openapi_types.Date `json:"legalStatusDate,omitempty"`

	// Obligated obligated authority
	Obligated *[]string `json:"obligated,omitempty"`

	// Pos a position in a year (or in a volume before year 2012)
	Pos *int32 `json:"pos,omitempty"`

	// PreviousTitle a list of previous titles of this act
	PreviousTitle *[]string `json:"previousTitle,omitempty"`

	// Prints a list of prints
	Prints *[]PrintRef `json:"prints,omitempty"`

	// Promulgation promulgation date
	Promulgation *openapi_types.Date `json:"promulgation,omitempty"`

	// Publisher a code of a publisher
	Publisher *string `json:"publisher,omitempty"`

	// References a list of references
	References *map[string][]ReferenceInfo `json:"references,omitempty"`

	// ReleasedBy issuing authority
	ReleasedBy *[]string `json:"releasedBy,omitempty"`

	// RepealDate date of repeal of the act
	RepealDate *openapi_types.Date `json:"repealDate,omitempty"`

	// Status status of the act
	Status *string `json:"status,omitempty"`

	// TextHTML a flag indicating this act has a HTML text
	TextHTML *bool `json:"textHTML,omitempty"`

	// TextPDF a flag indicating this act has a PDF text
	TextPDF *bool `json:"textPDF,omitempty"`

	// Texts a list of texts
	Texts *[]ActText `json:"texts,omitempty"`

	// Title a title of this act
	Title *string `json:"title,omitempty"`

	// Type a type of the act
	Type *string `json:"type,omitempty"`

	// ValidFrom date of binding force
	ValidFrom *openapi_types.Date `json:"validFrom,omitempty"`

	// Volume a volume of a publication. Specifies a volume in year. After year 2012 there are no volumes and this field should have value '0'.
	Volume *int32 `json:"volume,omitempty"`

	// Year a year of publication
	Year *int32 `json:"year,omitempty"`
}

// ActInfo Basic information about an act.
type ActInfo struct {
	// ELI an European Legislation Identifier
	ELI *string `json:"ELI,omitempty"`

	// Address an address of publication. An address is in format {publisher}{year}{volume}{position}.
	Address *string `json:"address,omitempty"`

	// AnnouncementDate announcement date
	AnnouncementDate *openapi_types.Date `json:"announcementDate,omitempty"`

	// ChangeDate date and time of last change in a document
	ChangeDate *CustomTime `json:"changeDate,omitempty"`

	// DisplayAddress a display address
	DisplayAddress *string `json:"displayAddress,omitempty"`

	// Pos a position in a year (or in a volume before year 2012)
	Pos *int32 `json:"pos,omitempty"`

	// Promulgation promulgation date
	Promulgation *openapi_types.Date `json:"promulgation,omitempty"`

	// Publisher a code of a publisher
	Publisher *string `json:"publisher,omitempty"`

	// Status status of the act
	Status *string `json:"status,omitempty"`

	// TextHTML a flag indicating this act has a HTML text
	TextHTML *bool `json:"textHTML,omitempty"`

	// TextPDF a flag indicating this act has a PDF text
	TextPDF *bool `json:"textPDF,omitempty"`

	// Title a title of this act
	Title *string `json:"title,omitempty"`

	// Type a type of the act
	Type *string `json:"type,omitempty"`

	// Volume a volume of a publication. Specifies a volume in year. After year 2012 there are no volumes and this field should have value '0'.
	Volume *int32 `json:"volume,omitempty"`

	// Year a year of publication
	Year *int32 `json:"year,omitempty"`
}

// ActOrder a sorting order
type ActOrder struct {
	Column *SortColumn `json:"column,omitempty"`
	Dir    *SortDir    `json:"dir,omitempty"`
}

// ActQuery a query for searching acts
type ActQuery struct {
	// Comparator a sorting direction
	Comparator *ActOrder `json:"comparator,omitempty"`

	// DateEffectFrom a date of effect to search from
	DateEffectFrom *openapi_types.Date `json:"dateEffectFrom,omitempty"`

	// DateEffectTo a date of effect to search to
	DateEffectTo *openapi_types.Date `json:"dateEffectTo,omitempty"`

	// DateEffectType a type of search on date of effect
	DateEffectType *SearchDate `json:"dateEffectType,omitempty"`

	// DateFrom a date of announcement to search from
	DateFrom *openapi_types.Date `json:"dateFrom,omitempty"`

	// DateTo a date of announcement to search to
	DateTo *openapi_types.Date `json:"dateTo,omitempty"`

	// DateType a type of search on date of announcement
	DateType *SearchDate `json:"dateType,omitempty"`

	// Exile include acts from Polish authorities in exile
	Exile *bool `json:"exile,omitempty"`

	// Keyword a list of keywords to search for
	Keyword *[]string `json:"keyword,omitempty"`

	// Position a selected position of publication
	Position *int32 `json:"position,omitempty"`

	// PubDateFrom a date of publication to search from
	PubDateFrom *openapi_types.Date `json:"pubDateFrom,omitempty"`

	// PubDateTo a date of publication to search to
	PubDateTo *openapi_types.Date `json:"pubDateTo,omitempty"`

	// PubDateType a type of search on date of publication
	PubDateType *SearchDate `json:"pubDateType,omitempty"`

	// Publisher a code of the selected publisher
	Publisher *string `json:"publisher,omitempty"`

	// PublisherName a name of the selected publisher
	PublisherName *string `json:"publisherName,omitempty"`

	// StatusInForce include only acts in force
	StatusInForce *bool `json:"statusInForce,omitempty"`

	// Title a title to search for
	Title *string `json:"title,omitempty"`

	// Type a list of act types to search for
	Type *[]string `json:"type,omitempty"`

	// Volume a selected volume of publication
	Volume *int32 `json:"volume,omitempty"`

	// Year a selected year of publication
	Year *int32 `json:"year,omitempty"`
}

// ActText An information about a text of an act.
type ActText struct {
	// FileName a file name
	FileName *string `json:"fileName,omitempty"`

	// Type a type of a text
	Type *ActTextType `json:"type,omitempty"`
}

// ActTextType a type of a text
type ActTextType string

// Directive An European directive.
type Directive struct {
	// Address an identifier of the directive
	Address *string `json:"address,omitempty"`

	// Date a date of the directive
	Date *openapi_types.Date `json:"date,omitempty"`

	// Title a title of the directive
	Title *string `json:"title,omitempty"`
}

// PrintRef An information about a print and legislative process.
type PrintRef struct {
	// Link a link to details of a legislative process
	Link *string `json:"link,omitempty"`

	// LinkPrintAPI a link to API for print details
	LinkPrintAPI *string `json:"linkPrintAPI,omitempty"`

	// LinkProcessAPI a link to API for process details
	LinkProcessAPI *string `json:"linkProcessAPI,omitempty"`

	// Number a number of the print
	Number *string `json:"number,omitempty"`

	// Term a term of Sejm when this print was published
	Term *int32 `json:"term,omitempty"`
}

// PublishingHouse An information about a publisher.
type PublishingHouse struct {
	// ActsCount count of acts
	ActsCount *int32 `json:"actsCount,omitempty"`

	// Code a unique code of a publisher
	Code *string `json:"code,omitempty"`

	// Name a full name of the publisher
	Name *string `json:"name,omitempty"`

	// ShortName a short name used to designate an act
	ShortName *string `json:"shortName,omitempty"`

	// Years a list of years for which there are acts
	Years *[]int32 `json:"years,omitempty"`
}

// ReferenceDetailsInfo information about a reference (with act header)
type ReferenceDetailsInfo struct {
	// Act a referenced act
	Act *ActInfo `json:"act,omitempty"`

	// Art referenced article (optional)
	Art *string `json:"art,omitempty"`

	// Date a date (optional, e.g. for repeal)
	Date *openapi_types.Date `json:"date,omitempty"`
}

// ReferenceInfo information about a reference (without act header, only act ID)
type ReferenceInfo struct {
	// Art referenced article (optional)
	Art *string `json:"art,omitempty"`

	// Date a date (optional, e.g. for repeal)
	Date *openapi_types.Date `json:"date,omitempty"`

	// Id an ELI address of the referenced act
	Id *string `json:"id,omitempty"`
}

// ReferencesDetailsInfo a map of type -> list of references, example keys: 'Akty uchylające', 'Akty zmieniające', values are type of ReferenceDetailsInfo
type ReferencesDetailsInfo map[string][]ReferenceDetailsInfo

// SearchDate defines model for SearchDate.
type SearchDate string

// SortColumn defines model for SortColumn.
type SortColumn string

// SortDir defines model for SortDir.
type SortDir string

// StatusInForce defines model for StatusInForce.
type StatusInForce string

// Acts A list of acts.
type Acts struct {
	// Count a number of returned items
	Count *int32 `json:"count,omitempty"`

	// Items a list of items
	Items *[]ActInfo `json:"items,omitempty"`

	// Offset a starting offset
	Offset *int32 `json:"offset,omitempty"`

	// SearchQuery a search query used to get a list of acts
	SearchQuery *ActQuery `json:"searchQuery,omitempty"`

	// TotalCount total number of items
	TotalCount *int32 `json:"totalCount,omitempty"`
}

// SearchParams defines parameters for Search.
type SearchParams struct {
	// Date a date of announcement of an act, in the format yyyy-MM-dd
	Date *string `form:"date,omitempty" json:"date,omitempty"`

	// DateEffect a date of effect, in the format yyyy-MM-dd
	DateEffect *string `form:"dateEffect,omitempty" json:"dateEffect,omitempty"`

	// DateEffectFrom a date of effect to search from, in the format yyyy-MM-dd
	DateEffectFrom *string `form:"dateEffectFrom,omitempty" json:"dateEffectFrom,omitempty"`

	// DateEffectTo a date of effect to search to, in the format yyyy-MM-dd
	DateEffectTo *string `form:"dateEffectTo,omitempty" json:"dateEffectTo,omitempty"`

	// DateFrom a date of announcement to search from, in the format yyyy-MM-dd
	DateFrom *string `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// DateTo a date of announcement to search to, in the format yyyy-MM-dd
	DateTo *string `form:"dateTo,omitempty" json:"dateTo,omitempty"`

	// Exile specify 'E' to search in the Exile database
	Exile *string `form:"exile,omitempty" json:"exile,omitempty"`

	// InForce empty to search for all documents, '1' to search only for active documents
	InForce *string `form:"inForce,omitempty" json:"inForce,omitempty"`

	// Keyword a list of keywords, separated by comma
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`

	// Limit a limit
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset a start index
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Position a position of publication
	Position *int32 `form:"position,omitempty" json:"position,omitempty"`

	// PubDate a date of promulgation to search on, in the format yyyy-MM-dd
	PubDate *string `form:"pubDate,omitempty" json:"pubDate,omitempty"`

	// PubDateFrom a date of promulgation to search from, in the format yyyy-MM-dd
	PubDateFrom *string `form:"pubDateFrom,omitempty" json:"pubDateFrom,omitempty"`

	// PubDateTo a date of promulgation to search to, in the format yyyy-MM-dd
	PubDateTo *string `form:"pubDateTo,omitempty" json:"pubDateTo,omitempty"`

	// Publisher a code of a publisher
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty"`

	// SortBy a name of a column to sort by: publisher, position, title, change
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortDir a sorting direction
	SortDir *string `form:"sortDir,omitempty" json:"sortDir,omitempty"`

	// Title words to find in title
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Type a type of document
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Volume a publication volume
	Volume *int32 `form:"volume,omitempty" json:"volume,omitempty"`

	// Year a year of publication
	Year *int32 `form:"year,omitempty" json:"year,omitempty"`
}

// GetActsInYearParams defines parameters for GetActsInYear.
type GetActsInYearParams struct {
	// SortBy a name of a column to sort by: publisher, position, title, change
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortDir a sorting direction
	SortDir *string `form:"sortDir,omitempty" json:"sortDir,omitempty"`
}

// GetChangesParams defines parameters for GetChanges.
type GetChangesParams struct {
	// Limit a number of entries to return, maximum is 500 entries.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset a start index
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Since a date to search for changes from
	Since string `form:"since" json:"since"`
}

// SearchByTitleParams defines parameters for SearchByTitle.
type SearchByTitleParams struct {
	// Q a fragment of title to search
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}
