// Package sejm provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sejm

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ComitteeType.
const (
	ComitteeTypeEXTRAORDINARY ComitteeType = "EXTRAORDINARY"
	ComitteeTypeINVESTIGATIVE ComitteeType = "INVESTIGATIVE"
	ComitteeTypeSTANDING      ComitteeType = "STANDING"
)

// Defines values for MemberType.
const (
	MemberTypeChairman       MemberType = "chairman"
	MemberTypeCoChairman     MemberType = "co_chairman"
	MemberTypeDeputyChairman MemberType = "deputy_chairman"
	MemberTypeMember         MemberType = "member"
	MemberTypeSecretary      MemberType = "secretary"
)

// Defines values for ProcessType.
const (
	ProcessTypeBILL                         ProcessType = "BILL"
	ProcessTypeCONSTITUTIONALTRIBUNALRULING ProcessType = "CONSTITUTIONAL_TRIBUNAL_RULING"
	ProcessTypeDRAFTRESOLUTION              ProcessType = "DRAFT_RESOLUTION"
	ProcessTypeOTHER                        ProcessType = "OTHER"
)

// Defines values for SittingStatus.
const (
	SittingStatusCANCELLED SittingStatus = "CANCELLED"
	SittingStatusFINISHED  SittingStatus = "FINISHED"
	SittingStatusPLANNED   SittingStatus = "PLANNED"
)

// Defines values for UEStatus.
const (
	UEStatusADAPTATION  UEStatus = "ADAPTATION"
	UEStatusENFORCEMENT UEStatus = "ENFORCEMENT"
	UEStatusNO          UEStatus = "NO"
)

// Defines values for UrgencyStatus.
const (
	UrgencyStatusNORMAL          UrgencyStatus = "NORMAL"
	UrgencyStatusURGENT          UrgencyStatus = "URGENT"
	UrgencyStatusURGENTWITHDRAWN UrgencyStatus = "URGENT_WITHDRAWN"
)

// Defines values for VoteValue.
const (
	VoteValueABSENT      VoteValue = "ABSENT"
	VoteValueABSTAIN     VoteValue = "ABSTAIN"
	VoteValueNO          VoteValue = "NO"
	VoteValueNOVOTE      VoteValue = "NO_VOTE"
	VoteValuePRESENT     VoteValue = "PRESENT"
	VoteValueVOTEINVALID VoteValue = "VOTE_INVALID"
	VoteValueVOTEVALID   VoteValue = "VOTE_VALID"
	VoteValueYES         VoteValue = "YES"
)

// Defines values for VotingKind.
const (
	VotingKindELECTRONIC  VotingKind = "ELECTRONIC"
	VotingKindONLIST      VotingKind = "ON_LIST"
	VotingKindTRADITIONAL VotingKind = "TRADITIONAL"
)

// Defines values for VotingMajority.
const (
	VotingMajorityABSOLUTEMAJORITY             VotingMajority = "ABSOLUTE_MAJORITY"
	VotingMajorityABSOLUTESTATUTORYMAJORITY    VotingMajority = "ABSOLUTE_STATUTORY_MAJORITY"
	VotingMajorityMAJORITYTHREEFIFTHS          VotingMajority = "MAJORITY_THREE_FIFTHS"
	VotingMajorityMAJORITYTWOTHIRDS            VotingMajority = "MAJORITY_TWO_THIRDS"
	VotingMajoritySIMPLEMAJORITY               VotingMajority = "SIMPLE_MAJORITY"
	VotingMajoritySTATUTORYMAJORITY            VotingMajority = "STATUTORY_MAJORITY"
	VotingMajoritySTATUTORYMAJORITYTHREEFIFTHS VotingMajority = "STATUTORY_MAJORITY_THREE_FIFTHS"
	VotingMajoritySTATUTORYMAJORITYTWOTHIRDS   VotingMajority = "STATUTORY_MAJORITY_TWO_THIRDS"
)

// Attachment An attachment.
type Attachment struct {
	// URL An url to download a file
	URL *string `json:"URL,omitempty"`

	// LastModified A date of last modification of a document
	LastModified *CustomTime `json:"lastModified,omitempty"`

	// Name A name of the file
	Name *string `json:"name,omitempty"`
}

// CaseRecipientDetails Details of a correspondence with a recipient
type CaseRecipientDetails struct {
	// AnswerDelayedDays number of days an answer is delayed for a given case. When an answer was given then the delay is set to 0.
	AnswerDelayedDays *int32 `json:"answerDelayedDays,omitempty"`

	// Name name of a recipient
	Name *string `json:"name,omitempty"`

	// Sent date when a case was sent
	Sent *openapi_types.Date `json:"sent,omitempty"`
}

// Club A club.
type Club struct {
	// Email Email to the club
	Email *string `json:"email,omitempty"`

	// Fax FAX to the club
	Fax *string `json:"fax,omitempty"`

	// Id an id of the club
	Id *string `json:"id,omitempty"`

	// MembersCount Number of club members
	MembersCount *int32 `json:"membersCount,omitempty"`

	// Name Name of the club
	Name *string `json:"name,omitempty"`

	// Phone Phone to the club
	Phone *string `json:"phone,omitempty"`
}

// ComitteeType defines model for ComitteeType.
type ComitteeType string

// Committee A comittee.
type Committee struct {
	// AppointmentDate Date of appointment
	AppointmentDate *openapi_types.Date `json:"appointmentDate,omitempty"`

	// Code Code of committee
	Code *string `json:"code,omitempty"`

	// CompositionDate Date of composition
	CompositionDate *openapi_types.Date `json:"compositionDate,omitempty"`

	// Members a list of committee members (current or at the date of closing the committee)
	Members *[]Member `json:"members,omitempty"`

	// Name Name of the committee
	Name *string `json:"name,omitempty"`

	// NameGenitive Name of the committee in genitive
	NameGenitive *string `json:"nameGenitive,omitempty"`

	// Phone Phone of the committee
	Phone *string `json:"phone,omitempty"`

	// Scope Description of the committee
	Scope         *string   `json:"scope,omitempty"`
	SubCommittees *[]string `json:"subCommittees,omitempty"`

	// Type Type of the committee
	Type *ComitteeType `json:"type,omitempty"`
}

// CommitteeSitting A committee sitting.
type CommitteeSitting struct {
	// Agenda An agenda of a meeting
	Agenda *string `json:"agenda,omitempty"`

	// Audio A link to an audio file
	Audio *string `json:"audio,omitempty"`

	// City A city where meeting took place
	City *string `json:"city,omitempty"`

	// Closed A flag indicating that a meeting is closed
	Closed *bool `json:"closed,omitempty"`

	// Code A committee code
	Code *string `json:"code,omitempty"`

	// Comments Additional comments
	Comments *string `json:"comments,omitempty"`

	// Date A sitting date
	Date *openapi_types.Date `json:"date,omitempty"`

	// EndDateTime A sitting end date
	EndDateTime *CustomTime `json:"endDateTime,omitempty"`

	// JointWith A list of committees at joint meeting
	JointWith *[]CommitteeSittingNum `json:"jointWith,omitempty"`

	// Notes Additional notes
	Notes *string `json:"notes,omitempty"`

	// Num A sitting number
	Num *int32 `json:"num,omitempty"`

	// Remote A flag indicating that a meeting is a remote meeting
	Remote *bool `json:"remote,omitempty"`

	// Room A room where the sitting takes place
	Room *string `json:"room,omitempty"`

	// StartDateTime A sitting start date
	StartDateTime *CustomTime `json:"startDateTime,omitempty"`

	// Status Status of the meeting
	Status *SittingStatus `json:"status,omitempty"`

	// Video A list of video transmissions
	Video *[]Video `json:"video,omitempty"`
}

// CommitteeSittingNum A sitting code and number
type CommitteeSittingNum struct {
	// Code A committee code
	Code *string `json:"code,omitempty"`

	// Num A sitting number
	Num *int32 `json:"num,omitempty"`
}

// Group A group
type Group struct {
	// AppointmentDate appointment date
	AppointmentDate *openapi_types.Date `json:"appointmentDate,omitempty"`

	// EngName Name of the group in english
	EngName *string `json:"engName,omitempty"`

	// Id ID used to get group details
	Id *int32 `json:"id,omitempty"`

	// Name Name of the group
	Name *string `json:"name,omitempty"`
}

// GroupDetails A group details
type GroupDetails struct {
	// AppointmentDate appointment date
	AppointmentDate *openapi_types.Date `json:"appointmentDate,omitempty"`

	// EngName Name of the group in english
	EngName *string `json:"engName,omitempty"`

	// Id ID used to get group details
	Id *int32 `json:"id,omitempty"`

	// Members members
	Members *[]GroupMember `json:"members,omitempty"`

	// Name Name of the group
	Name *string `json:"name,omitempty"`

	// Remarks remarks
	Remarks *string `json:"remarks,omitempty"`
}

// GroupMember Information about a member of a group
type GroupMember struct {
	// Club Name of a club
	Club *string `json:"club,omitempty"`

	// Id A number of the identity card of the MP
	Id *string `json:"id,omitempty"`

	// MandateEnd A date when mandate of MP expired
	MandateEnd *openapi_types.Date `json:"mandateEnd,omitempty"`

	// MembershipEnd A date when membership in this group ended
	MembershipEnd *openapi_types.Date `json:"membershipEnd,omitempty"`

	// MembershipStart A date when membership in this group started
	MembershipStart *openapi_types.Date `json:"membershipStart,omitempty"`

	// Name Last and first name of the MP
	Name *string `json:"name,omitempty"`

	// Senator A flag indicating that a member is not an MP, but a senate member
	Senator *bool `json:"senator,omitempty"`

	// Type A type of membership
	Type *MemberType `json:"type,omitempty"`
}

// Interpellation An interpellation (pl: interpelacja).
type Interpellation struct {
	// AnswerDelayedDays number of days an answer is delayed for a given case. When there are multiple recipients then a maximum value is taken.
	AnswerDelayedDays *int32 `json:"answerDelayedDays,omitempty"`

	// From A list of IDs of MPs who submitted the question
	From *[]string `json:"from,omitempty"`

	// LastModified A date of last modification of a document
	LastModified *CustomTime `json:"lastModified,omitempty"`

	// Links Links to HTML pages with a description or a content (body)
	Links *[]interface{} `json:"links,omitempty"`

	// Num A document number
	Num *int32 `json:"num,omitempty"`

	// ReceiptDate A date when the case was received
	ReceiptDate *openapi_types.Date `json:"receiptDate,omitempty"`

	// RecipientDetails A more detailed list of ministries to whom the question was sent
	RecipientDetails *[]CaseRecipientDetails `json:"recipientDetails,omitempty"`

	// RepeatedInterpellation a list of interpellations that were submitted after reciving unsatisfactory answer (request for additional explanations)
	RepeatedInterpellation *[]Interpellation `json:"repeatedInterpellation,omitempty"`

	// Replies A list of replies
	Replies *[]Reply `json:"replies,omitempty"`

	// SentDate A date when the interpellation was sent to recipients
	SentDate *openapi_types.Date `json:"sentDate,omitempty"`

	// Term A Sejm term when the document was submitted
	Term *int32 `json:"term,omitempty"`

	// Title A title of the case
	Title *string `json:"title,omitempty"`

	// To A list of ministries to whom the question was sent
	To *[]string `json:"to,omitempty"`
}

// LocalDate defines model for LocalDate.
type LocalDate = openapi_types.Date

// LocalDateTime defines model for LocalDateTime.
type LocalDateTime = CustomTime

// MP A MP.
type MP struct {
	// AccusativeName The first and last name in accusative case.
	AccusativeName *string `json:"accusativeName,omitempty"`

	// Active Is the MP active?
	Active *bool `json:"active,omitempty"`

	// BirthDate a date of birth
	BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

	// BirthLocation a place of birth
	BirthLocation *string `json:"birthLocation,omitempty"`

	// Club A club to where MP is belonging
	Club *string `json:"club,omitempty"`

	// DistrictName A district name where MP was elected
	DistrictName *string `json:"districtName,omitempty"`

	// DistrictNum A district id where MP was elected
	DistrictNum *int32 `json:"districtNum,omitempty"`

	// EducationLevel an education level
	EducationLevel *string `json:"educationLevel,omitempty"`

	// Email The email of the MP.
	Email *string `json:"email,omitempty"`

	// FirstLastName The first and last name of the MP.
	FirstLastName *string `json:"firstLastName,omitempty"`

	// FirstName The first name of the MP.
	FirstName *string `json:"firstName,omitempty"`

	// GenitiveName The first and last name in genitive case.
	GenitiveName *string `json:"genitiveName,omitempty"`

	// Id A number of the identity card of the MP.
	Id *int32 `json:"id,omitempty"`

	// InactiveCause The cause of inactivity
	InactiveCause *string `json:"inactiveCause,omitempty"`

	// LastFirstName The last and first name of the MP.
	LastFirstName *string `json:"lastFirstName,omitempty"`

	// LastName The last name of the MP.
	LastName *string `json:"lastName,omitempty"`

	// NumberOfVotes a number of votes
	NumberOfVotes *int32 `json:"numberOfVotes,omitempty"`

	// Profession a profession
	Profession *string `json:"profession,omitempty"`

	// SecondName The second name of the MP.
	SecondName *string `json:"secondName,omitempty"`

	// Voivodeship A voivodeship where MP was elected
	Voivodeship *string `json:"voivodeship,omitempty"`

	// WaiverDesc ?
	WaiverDesc *string `json:"waiverDesc,omitempty"`
}

// Member A member of a committee or a parliamentary team.
type Member struct {
	// Club A club to where MP is belonging
	Club *string `json:"club,omitempty"`

	// Function A function in the committee.
	Function *string `json:"function,omitempty"`

	// Id A number of the identity card of the MP.
	Id *int32 `json:"id,omitempty"`

	// LastFirstName The last and first name of the MP.
	LastFirstName *string `json:"lastFirstName,omitempty"`

	// MandateExpired A date of expiry of the parliamentary mandate.
	MandateExpired *openapi_types.Date `json:"mandateExpired,omitempty"`
}

// MemberType defines model for MemberType.
type MemberType string

// Print A print
type Print struct {
	// AdditionalPrints a list of additional prints added to the print
	AdditionalPrints *[]Print `json:"additionalPrints,omitempty"`

	// Attachments a list of attachments added to the print
	Attachments *[]string `json:"attachments,omitempty"`

	// ChangeDate a date of of last change to the print
	ChangeDate *CustomTime `json:"changeDate,omitempty"`

	// DeliveryDate a date of delivery of a print
	DeliveryDate *openapi_types.Date `json:"deliveryDate,omitempty"`

	// DocumentDate a date of a print
	DocumentDate *openapi_types.Date `json:"documentDate,omitempty"`

	// Number a number of a print in the specified Sejm term
	Number *string `json:"number,omitempty"`

	// NumberAssociated numbers of prints that this print is associated with
	NumberAssociated *[]string `json:"numberAssociated,omitempty"`

	// ProcessPrint a list of prints that started a legislative process that this print is connected to
	ProcessPrint *[]string `json:"processPrint,omitempty"`

	// Term a Sejm term
	Term *int32 `json:"term,omitempty"`

	// Title a title of a print
	Title *string `json:"title,omitempty"`
}

// PrintInfo info about prints
type PrintInfo struct {
	// Count number of prints
	Count *int32 `json:"count,omitempty"`

	// LastChanged date of last changed document
	LastChanged *CustomTime `json:"lastChanged,omitempty"`

	// Link a link to prints endpoint
	Link *string `json:"link,omitempty"`
}

// Proceeding A proceeding.
type Proceeding struct {
	// Agenda agenda of a proceeding
	Agenda *string `json:"agenda,omitempty"`

	// Current is this a current proceeding
	Current *bool `json:"current,omitempty"`

	// CurrentAffairs current information and questions on current affairs (only for current proceeding)
	CurrentAffairs *string `json:"currentAffairs,omitempty"`

	// Dates a dates of the proceeding
	Dates *[]openapi_types.Date `json:"dates,omitempty"`

	// Number a proceeding number
	Number *int32 `json:"number,omitempty"`

	// Schedule schedule of a proceeding (only for current proceeding)
	Schedule *string `json:"schedule,omitempty"`

	// Title a title of the proceeding
	Title *string `json:"title,omitempty"`

	// Votings schedule of votings for a proceeding (only for current proceeding)
	Votings *string `json:"votings,omitempty"`
}

// ProceedingDay info about a proceeding day
type ProceedingDay struct {
	// Date proceeding date
	Date *openapi_types.Date `json:"date,omitempty"`

	// Proceeding proceeding number
	Proceeding *int32 `json:"proceeding,omitempty"`

	// VotingsNum number of votings on this day
	VotingsNum *int32 `json:"votingsNum,omitempty"`
}

// ProcessDetails A details of legislative process
type ProcessDetails struct {
	// Address an address of publication in the ISAP service. An address is in format {publisher}{year}{volume}{position}
	Address *string `json:"address,omitempty"`

	// ChangeDate a date of last change to the process
	ChangeDate *CustomTime `json:"changeDate,omitempty"`

	// ClosureDate A date of case closure
	ClosureDate *openapi_types.Date `json:"closureDate,omitempty"`

	// Comments comments
	Comments *string `json:"comments,omitempty"`

	// Description a description of a process
	Description *string `json:"description,omitempty"`

	// DisplayAddress an address to display
	DisplayAddress *string `json:"displayAddress,omitempty"`

	// DocumentDate a date of a print
	DocumentDate *openapi_types.Date `json:"documentDate,omitempty"`

	// DocumentType a type of a document
	DocumentType *string `json:"documentType,omitempty"`

	// DocumentTypeEnum A document type
	DocumentTypeEnum *ProcessType `json:"documentTypeEnum,omitempty"`

	// ELI an European Legislation Identifier
	ELI *string `json:"eLI,omitempty"`

	// LegislativeCommittee indicates that for work on this project a members of Legislative Committee has been assigned
	LegislativeCommittee *bool `json:"legislativeCommittee,omitempty"`

	// Links Links
	Links *[]interface{} `json:"links,omitempty"`

	// Number a number of a print in the specified Sejm term
	Number *string `json:"number,omitempty"`

	// OtherDocuments other prints, corrections
	OtherDocuments *[]ProcessDocument `json:"otherDocuments,omitempty"`

	// Passed is this act was passed
	Passed *bool `json:"passed,omitempty"`

	// PrincipleOfSubsidiarity indicates that the project is inconsistent with the principle of subsidiarity
	PrincipleOfSubsidiarity *bool `json:"principleOfSubsidiarity,omitempty"`

	// PrintsConsideredJointly prints considered jointly
	PrintsConsideredJointly *[]string `json:"printsConsideredJointly,omitempty"`

	// ProcessStartDate a date of the start of the process
	ProcessStartDate *openapi_types.Date `json:"processStartDate,omitempty"`

	// RclLink link to goverment part of the process (RCL website)
	RclLink *string `json:"rclLink,omitempty"`

	// RclNum number from goverment part of the process (from RCL website)
	RclNum *string `json:"rclNum,omitempty"`

	// ShortenProcedure Article 51 of the Sejm Regulations - in particularly justified cases, the Sejm may shorten the procedure for drafting bills
	ShortenProcedure *bool `json:"shortenProcedure,omitempty"`

	// Stages stages of the process
	Stages *[]ProcessStage `json:"stages,omitempty"`

	// Term a Sejm term
	Term *int32 `json:"term,omitempty"`

	// Title a title of a process
	Title *string `json:"title,omitempty"`

	// TitleFinal A final title of the act
	TitleFinal *string `json:"titleFinal,omitempty"`

	// UE is this process realization of the UE law
	UE *UEStatus `json:"uE,omitempty"`

	// UrgencyStatus urgency status
	UrgencyStatus *UrgencyStatus `json:"urgencyStatus,omitempty"`

	// UrgencyWithdrawDate date when urgency clause was withdrawn
	UrgencyWithdrawDate *openapi_types.Date `json:"urgencyWithdrawDate,omitempty"`

	// WebGeneratedDate A date when a web page with a process was updated
	WebGeneratedDate *CustomTime `json:"webGeneratedDate,omitempty"`
}

// ProcessDocument A document in the legislative process.
type ProcessDocument struct {
	// DocumentDate a date of a document
	DocumentDate *openapi_types.Date `json:"documentDate,omitempty"`

	// Number a print number
	Number *string `json:"number,omitempty"`

	// RegisteredDate a date when a document was registered
	RegisteredDate *openapi_types.Date `json:"registeredDate,omitempty"`

	// Title a title of a print
	Title *string `json:"title,omitempty"`
}

// ProcessHeader A legislative process
type ProcessHeader struct {
	// ELI an European Legislation Identifier
	ELI *string `json:"ELI,omitempty"`

	// Address an address of publication in the ISAP service. An address is in format {publisher}{year}{volume}{position}
	Address *string `json:"address,omitempty"`

	// ChangeDate A date when a process was last changed
	ChangeDate *CustomTime `json:"changeDate,omitempty"`

	// ClosureDate A date of case closure
	ClosureDate *openapi_types.Date `json:"closureDate,omitempty"`

	// Comments Comments
	Comments *string `json:"comments,omitempty"`

	// Description A description of the process
	Description *string `json:"description,omitempty"`

	// DisplayAddress an address to display
	DisplayAddress *string `json:"displayAddress,omitempty"`

	// DocumentDate A date of document
	DocumentDate *openapi_types.Date `json:"documentDate,omitempty"`

	// DocumentType A document type
	DocumentType *string `json:"documentType,omitempty"`

	// DocumentTypeEnum A document type
	DocumentTypeEnum *ProcessType `json:"documentTypeEnum,omitempty"`

	// ELIAlt an European Legislation Identifier (alternate field)
	ELIAlt *string `json:"eLI,omitempty"`

	// Links Links
	Links *[]interface{} `json:"links,omitempty"`

	// Number A number of the process
	Number *string `json:"number,omitempty"`

	// Passed is this act was passed
	Passed *bool `json:"passed,omitempty"`

	// PrintsConsideredJointly prints considered jointly
	PrintsConsideredJointly *[]string `json:"printsConsideredJointly,omitempty"`

	// ProcessStartDate Process start date
	ProcessStartDate *openapi_types.Date `json:"processStartDate,omitempty"`

	// ShortenProcedure Article 51 of the Sejm Regulations - in particularly justified cases, the Sejm may shorten the procedure for drafting bills
	ShortenProcedure *bool `json:"shortenProcedure,omitempty"`

	// Term A Sejm term
	Term *int32 `json:"term,omitempty"`

	// Title A title of the process
	Title *string `json:"title,omitempty"`

	// TitleFinal A final title of the act
	TitleFinal *string `json:"titleFinal,omitempty"`

	// UE is this process realization of the UE law
	UE *UEStatus `json:"uE,omitempty"`

	// Ue A UE type of process
	Ue *UEStatus `json:"ue,omitempty"`

	// WebGeneratedDate A date when a web page with a process was updated
	WebGeneratedDate *CustomTime `json:"webGeneratedDate,omitempty"`
}

// ProcessStage a stage in the legislative process
type ProcessStage struct {
	// Children child stages
	Children *[]ProcessStage `json:"children,omitempty"`

	// Date a stage date
	Date *openapi_types.Date `json:"date,omitempty"`

	// StageName a name of a stage
	StageName *string `json:"stageName,omitempty"`

	// StageType a type of a stage
	StageType *string `json:"stageType,omitempty"`
}

// ProcessType defines model for ProcessType.
type ProcessType string

// Reply reply to an interpellation or question
type Reply struct {
	// Attachments Attachments
	Attachments *[]Attachment `json:"attachments,omitempty"`

	// From A name of an author
	From *string `json:"from,omitempty"`

	// Key a reply identifier
	Key *string `json:"key,omitempty"`

	// LastModified A date of last modification of a document
	LastModified *CustomTime `json:"lastModified,omitempty"`

	// Links Links to HTML page with a description or a content (body)
	Links *[]interface{} `json:"links,omitempty"`

	// OnlyAttachment Flag indicating that this reply contains only an attachment (without HTML body)
	OnlyAttachment *bool `json:"onlyAttachment,omitempty"`

	// Prolongation Is this reply a prolongation. Text of prolongation is not published.
	Prolongation *bool `json:"prolongation,omitempty"`

	// ReceiptDate A date when the reply was received
	ReceiptDate *openapi_types.Date `json:"receiptDate,omitempty"`
}

// SittingStatus defines model for SittingStatus.
type SittingStatus string

// Statement statement on a sitting
type Statement struct {
	// EndDateTime end time of the statement
	EndDateTime *CustomTime `json:"endDateTime,omitempty"`

	// Function function of the speaker
	Function *string `json:"function,omitempty"`

	// MemberID MP id number, if speaker is an MP, 0 otherwise
	MemberID *int32 `json:"memberID,omitempty"`

	// Name name of the speaker
	Name *string `json:"name,omitempty"`

	// Num statement number, 0 is always for course of the sitting
	Num *int32 `json:"num,omitempty"`

	// Rapporteur this statement was made by the rapporteur
	Rapporteur *bool `json:"rapporteur,omitempty"`

	// Secretary this statement was made by the secretary
	Secretary *bool `json:"secretary,omitempty"`

	// StartDateTime start time of the statement
	StartDateTime *CustomTime `json:"startDateTime,omitempty"`

	// Unspoken is this is unspoken statement
	Unspoken *bool `json:"unspoken,omitempty"`
}

// StatementList defines model for StatementList.
type StatementList struct {
	Date          *LocalDate   `json:"date,omitempty"`
	ProceedingNum *int32       `json:"proceedingNum,omitempty"`
	Statements    *[]Statement `json:"statements,omitempty"`
}

// Term information about a term of the Sejm
type Term struct {
	// Current Current of term
	Current *bool `json:"current,omitempty"`

	// From Date start of term
	From *openapi_types.Date `json:"from,omitempty"`

	// Num Number of term of the Sejm
	Num *int32 `json:"num,omitempty"`

	// Prints info about prints
	Prints *PrintInfo `json:"prints,omitempty"`

	// To Date end of term
	To *openapi_types.Date `json:"to,omitempty"`
}

// UEStatus defines model for UEStatus.
type UEStatus string

// UrgencyStatus defines model for UrgencyStatus.
type UrgencyStatus string

// Video a video
type Video struct {
	// Audio A link to a an audio file
	Audio *string `json:"audio,omitempty"`

	// Committee A committee code if the transmission is a committee meeting
	Committee *string `json:"committee,omitempty"`

	// Description A description of a transmission
	Description *string `json:"description,omitempty"`

	// EndDateTime An end date and time of transmission
	EndDateTime *CustomTime `json:"endDateTime,omitempty"`

	// OtherVideoLinks A list of URLs to a other cameras in a video transmission
	OtherVideoLinks *[]string `json:"otherVideoLinks,omitempty"`

	// PlayerLink A link to a video player on the Sejm website
	PlayerLink *string `json:"playerLink,omitempty"`

	// PlayerLinkIFrame A link to a video player on the Sejm website, that can be embedded as iframe
	PlayerLinkIFrame *string `json:"playerLinkIFrame,omitempty"`

	// Room A room where the transmission takes place
	Room *string `json:"room,omitempty"`

	// SignLangLink An URL of a sign language transmission
	SignLangLink *string `json:"signLangLink,omitempty"`

	// StartDateTime A start date and time of transmission
	StartDateTime *CustomTime `json:"startDateTime,omitempty"`

	// Subcommittee A subcommittee code if the transmission is a subcommittee meeting
	Subcommittee *string `json:"subcommittee,omitempty"`

	// Title A title of a transmission
	Title *string `json:"title,omitempty"`

	// Transcribe Is there a transcription available
	Transcribe *bool `json:"transcribe,omitempty"`

	// Type A type of transmission
	Type *string `json:"type,omitempty"`

	// Unid An unique indentifier of a transmission
	Unid *string `json:"unid,omitempty"`

	// VideoLink An URL or URLs to a video transmission
	VideoLink *string `json:"videoLink,omitempty"`

	// VideoMessagesLink A link to a messages for a transmission
	VideoMessagesLink *string `json:"videoMessagesLink,omitempty"`
}

// Vote a vote
type Vote struct {
	// MP an MP number
	MP *int32 `json:"MP,omitempty"`

	// Club an MP club
	Club *string `json:"club,omitempty"`

	// FirstName an MP first name
	FirstName *string `json:"firstName,omitempty"`

	// LastName an MP last name
	LastName *string `json:"lastName,omitempty"`

	// ListVotes a vote on a list
	ListVotes *map[string]VoteValue `json:"listVotes,omitempty"`

	// SecondName an MP second name
	SecondName *string `json:"secondName,omitempty"`

	// Vote a vote
	Vote *VoteValue `json:"vote,omitempty"`
}

// VoteMP a vote used in MP votings
type VoteMP struct {
	// Date a voting date and time
	Date *CustomTime `json:"date,omitempty"`

	// Description description
	Description *string `json:"description,omitempty"`

	// Kind a kind of voting
	Kind *VotingKind `json:"kind,omitempty"`

	// ListVotes 'yes' votes on a list
	ListVotes *map[string]string `json:"listVotes,omitempty"`

	// Title a voting title
	Title *string `json:"title,omitempty"`

	// Topic a voting topic
	Topic *string `json:"topic,omitempty"`

	// Vote a vote
	Vote *VoteValue `json:"vote,omitempty"`

	// VotingNumber a voting number
	VotingNumber *int32 `json:"votingNumber,omitempty"`
}

// VoteValue defines model for VoteValue.
type VoteValue string

// Voting a voting
type Voting struct {
	// Abstain number of 'abstain' votes
	Abstain *int32 `json:"abstain,omitempty"`

	// AgainstAll number of votes against all options when voting on list
	AgainstAll *int32 `json:"againstAll,omitempty"`

	// Date a voting date and time
	Date *CustomTime `json:"date,omitempty"`

	// Description description
	Description *string `json:"description,omitempty"`

	// Kind a kind of voting
	Kind *VotingKind `json:"kind,omitempty"`

	// Links Links
	Links *[]interface{} `json:"links,omitempty"`

	// MajorityType a voting majority
	MajorityType *VotingMajority `json:"majorityType,omitempty"`

	// MajorityVotes number of votes that constitute a majority
	MajorityVotes *int32 `json:"majorityVotes,omitempty"`

	// No number of 'no' votes
	No *int32 `json:"no,omitempty"`

	// NotParticipating number of people who did not vote
	NotParticipating *int32 `json:"notParticipating,omitempty"`

	// Present number of 'present' votes in quorum voting
	Present *int32 `json:"present,omitempty"`

	// Sitting a Sejm sitting number
	Sitting *int32 `json:"sitting,omitempty"`

	// SittingDay a day of Sejm sitting
	SittingDay *int32 `json:"sittingDay,omitempty"`

	// Term a Sejm term
	Term *int32 `json:"term,omitempty"`

	// Title a voting title
	Title *string `json:"title,omitempty"`

	// Topic a voting topic
	Topic *string `json:"topic,omitempty"`

	// TotalVoted number of people who voted
	TotalVoted *int32 `json:"totalVoted,omitempty"`

	// VotingNumber a voting number
	VotingNumber *int32 `json:"votingNumber,omitempty"`

	// VotingOptions a list of options when voting on a list
	VotingOptions *[]VotingOption `json:"votingOptions,omitempty"`

	// Yes number of 'yes' votes
	Yes *int32 `json:"yes,omitempty"`
}

// VotingDetails a voting with results
type VotingDetails struct {
	// Abstain number of 'abstain' votes
	Abstain *int32 `json:"abstain,omitempty"`

	// AgainstAll number of votes against all options when voting on list
	AgainstAll *int32 `json:"againstAll,omitempty"`

	// Date a voting date and time
	Date *CustomTime `json:"date,omitempty"`

	// Description description
	Description *string `json:"description,omitempty"`

	// Kind a kind of voting
	Kind *VotingKind `json:"kind,omitempty"`

	// Links Links
	Links *[]interface{} `json:"links,omitempty"`

	// MajorityType a voting majority
	MajorityType *VotingMajority `json:"majorityType,omitempty"`

	// MajorityVotes number of votes that constitute a majority
	MajorityVotes *int32 `json:"majorityVotes,omitempty"`

	// No number of 'no' votes
	No *int32 `json:"no,omitempty"`

	// NotParticipating number of people who did not vote
	NotParticipating *int32 `json:"notParticipating,omitempty"`

	// Present number of 'present' votes in quorum voting
	Present *int32 `json:"present,omitempty"`

	// Sitting a Sejm sitting number
	Sitting *int32 `json:"sitting,omitempty"`

	// SittingDay a day of Sejm sitting
	SittingDay *int32 `json:"sittingDay,omitempty"`

	// Term a Sejm term
	Term *int32 `json:"term,omitempty"`

	// Title a voting title
	Title *string `json:"title,omitempty"`

	// Topic a voting topic
	Topic *string `json:"topic,omitempty"`

	// TotalVoted number of people who voted
	TotalVoted *int32 `json:"totalVoted,omitempty"`

	// Votes a list of votes
	Votes *[]Vote `json:"votes,omitempty"`

	// VotingNumber a voting number
	VotingNumber *int32 `json:"votingNumber,omitempty"`

	// VotingOptions a list of options when voting on a list
	VotingOptions *[]VotingOption `json:"votingOptions,omitempty"`

	// Yes number of 'yes' votes
	Yes *int32 `json:"yes,omitempty"`
}

// VotingKind defines model for VotingKind.
type VotingKind string

// VotingMajority defines model for VotingMajority.
type VotingMajority string

// VotingOption voting option when voting on a list
type VotingOption struct {
	// Description an optional description
	Description *string `json:"description,omitempty"`

	// Option an option
	Option *string `json:"option,omitempty"`

	// OptionIndex an option index
	OptionIndex *int `json:"optionIndex,omitempty"`

	// Votes number of votes for this option
	Votes *int32 `json:"votes,omitempty"`
}

// VotingStat MP voting statistics
type VotingStat struct {
	// AbsenceExcuse is there a excuse for absence
	AbsenceExcuse *bool `json:"absenceExcuse,omitempty"`

	// Date sitting date
	Date *openapi_types.Date `json:"date,omitempty"`

	// NumMissed number of votings missed on this day
	NumMissed *int32 `json:"numMissed,omitempty"`

	// NumVoted number of MP votings on this day
	NumVoted *int32 `json:"numVoted,omitempty"`

	// NumVotings number of votings on this day
	NumVotings *int32 `json:"numVotings,omitempty"`

	// Sitting sitting number
	Sitting *int32 `json:"sitting,omitempty"`
}

// WrittenQuestion A written question (pl: zapytanie).
type WrittenQuestion struct {
	// AnswerDelayedDays number of days an answer is delayed for a given case. When there are multiple recipients then a maximum value is taken.
	AnswerDelayedDays *int32 `json:"answerDelayedDays,omitempty"`

	// From A list of IDs of MPs who submitted the question
	From *[]string `json:"from,omitempty"`

	// LastModified A date of last modification of a document
	LastModified *CustomTime `json:"lastModified,omitempty"`

	// Links Links to HTML pages with a description or a content (body)
	Links *[]interface{} `json:"links,omitempty"`

	// Num A document number
	Num *int32 `json:"num,omitempty"`

	// ReceiptDate A date when the case was received
	ReceiptDate *openapi_types.Date `json:"receiptDate,omitempty"`

	// RecipientDetails A more detailed list of ministries to whom the question was sent
	RecipientDetails *[]CaseRecipientDetails `json:"recipientDetails,omitempty"`

	// Replies A list of replies
	Replies *[]Reply `json:"replies,omitempty"`

	// SentDate A date when the interpellation was sent to recipients
	SentDate *openapi_types.Date `json:"sentDate,omitempty"`

	// Term A Sejm term when the document was submitted
	Term *int32 `json:"term,omitempty"`

	// Title A title of the case
	Title *string `json:"title,omitempty"`

	// To A list of ministries to whom the question was sent
	To *[]string `json:"to,omitempty"`
}

// GetSejmTermTermCommitteesSittingsDateParams defines parameters for GetSejmTermTermCommitteesSittingsDate.
type GetSejmTermTermCommitteesSittingsDateParams struct {
	// Cancelled also include cancelled sittings
	Cancelled *bool `form:"cancelled,omitempty" json:"cancelled,omitempty"`
}

// GetSejmTermTermCommitteesCodeSittingsParams defines parameters for GetSejmTermTermCommitteesCodeSittings.
type GetSejmTermTermCommitteesCodeSittingsParams struct {
	// Cancelled also include cancelled sittings
	Cancelled *bool `form:"cancelled,omitempty" json:"cancelled,omitempty"`
}

// GetSejmTermTermInterpellationsParams defines parameters for GetSejmTermTermInterpellations.
type GetSejmTermTermInterpellationsParams struct {
	// Delayed display only cases where an answer delayed
	Delayed *bool `form:"delayed,omitempty" json:"delayed,omitempty"`

	// From filters interpellations from a MP with a specified ID
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Limit controls the maximum number of items that may be returned for a single request
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// ModifiedSince filters interpellations modified since specified date
	ModifiedSince *LocalDateTime `form:"modifiedSince,omitempty" json:"modifiedSince,omitempty"`

	// Offset controls the starting point within the collection of resource results
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Since filters interpellations starting from a specified date
	Since *string `form:"since,omitempty" json:"since,omitempty"`

	// SortBy sorts objects by specified field, to sort in descending order add a minus sign before field name
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Till filters interpellations starting before a specified date
	Till *string `form:"till,omitempty" json:"till,omitempty"`

	// Title filters interpellations containing a specified string in a title
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// To filters interpellations sent to a specified recipient
	To *string `form:"to,omitempty" json:"to,omitempty"`
}

// GetSejmTermTermPrintsParams defines parameters for GetSejmTermTermPrints.
type GetSejmTermTermPrintsParams struct {
	// SortBy sorts objects by specified field, to sort in descending order add a minus sign before field name
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`
}

// GetSejmTermTermProcessesParams defines parameters for GetSejmTermTermProcesses.
type GetSejmTermTermProcessesParams struct {
	// DocumentType a type of a document
	DocumentType *string `form:"documentType,omitempty" json:"documentType,omitempty"`

	// Limit controls the maximum number of items that may be returned for a single request
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// ModifiedSince filters processes  modified since specified date
	ModifiedSince *LocalDateTime `form:"modifiedSince,omitempty" json:"modifiedSince,omitempty"`

	// Offset controls the starting point within the collection of resource results
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Passed only passed acts
	Passed *bool `form:"passed,omitempty" json:"passed,omitempty"`

	// SortBy sorts objects by specified field, to sort in descending order add a minus sign before field name
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Title filters processes containing a specified string in a title
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// GetSejmTermTermProcessesPassedParams defines parameters for GetSejmTermTermProcessesPassed.
type GetSejmTermTermProcessesPassedParams struct {
	// DocumentType a type of a document
	DocumentType *string `form:"documentType,omitempty" json:"documentType,omitempty"`

	// Limit controls the maximum number of items that may be returned for a single request
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// ModifiedSince filters processes  modified since specified date
	ModifiedSince *LocalDateTime `form:"modifiedSince,omitempty" json:"modifiedSince,omitempty"`

	// Offset controls the starting point within the collection of resource results
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Passed only passed acts
	Passed *bool `form:"passed,omitempty" json:"passed,omitempty"`

	// SortBy sorts objects by specified field, to sort in descending order add a minus sign before field name
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Title filters processes containing a specified string in a title
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// GetSejmTermTermVideosParams defines parameters for GetSejmTermTermVideos.
type GetSejmTermTermVideosParams struct {
	// Comm filters videos for a specified committee
	Comm *string `form:"comm,omitempty" json:"comm,omitempty"`

	// Limit controls the maximum number of items that may be returned for a single request
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset controls the starting point within the collection of resource results
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Since filters videos starting from a specified date
	Since *string `form:"since,omitempty" json:"since,omitempty"`

	// Till filters videos starting before a specified date
	Till *string `form:"till,omitempty" json:"till,omitempty"`

	// Title filters videos containing a specified string in a title
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// Type filters videos with a specified type
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetSejmTermTermVotingsSearchParams defines parameters for GetSejmTermTermVotingsSearch.
type GetSejmTermTermVotingsSearchParams struct {
	// DateFrom a date to search from
	DateFrom *LocalDate `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// DateTo a date to search to
	DateTo *LocalDate `form:"dateTo,omitempty" json:"dateTo,omitempty"`

	// Limit controls the maximum number of items that may be returned for a single request
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset controls the starting point within the collection of resource results
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Proceeding a proceeding number
	Proceeding *int32 `form:"proceeding,omitempty" json:"proceeding,omitempty"`

	// Title a title to search for
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// GetSejmTermTermWrittenQuestionsParams defines parameters for GetSejmTermTermWrittenQuestions.
type GetSejmTermTermWrittenQuestionsParams struct {
	// Delayed display only cases where an answer delayed
	Delayed *bool `form:"delayed,omitempty" json:"delayed,omitempty"`

	// From filters interpellations from a MP with a specified ID
	From *string `form:"from,omitempty" json:"from,omitempty"`

	// Limit controls the maximum number of items that may be returned for a single request
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// ModifiedSince filters interpellations modified since specified date
	ModifiedSince *LocalDateTime `form:"modifiedSince,omitempty" json:"modifiedSince,omitempty"`

	// Offset controls the starting point within the collection of resource results
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`

	// Since filters interpellations starting from a specified date
	Since *string `form:"since,omitempty" json:"since,omitempty"`

	// SortBy sorts objects by specified field, to sort in descending order add a minus sign before field name
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Till filters interpellations starting before a specified date
	Till *string `form:"till,omitempty" json:"till,omitempty"`

	// Title filters interpellations containing a specified string in a title
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// To filters interpellations sent to a specified recipient
	To *string `form:"to,omitempty" json:"to,omitempty"`
}
